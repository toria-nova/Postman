{
	"info": {
		"_postman_id": "0d89370e-55ae-450e-be8b-e773a2b6c541",
		"name": "victorialitvinova_homework_postman 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22630666"
	},
	"item": [
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Name = vika\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"vika\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"age=27\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"pm.test(\"Salary = 3500\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(3500);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"let req = request.data\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = +req.salary\r",
							"let resp_salary_1_5 = req_salary * 4\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"console.log (\r",
							"    jsonData.salary\r",
							")\r",
							"\r",
							"console.log (\r",
							"    jsonData.family\r",
							")\r",
							"\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(resp_salary_1_5);\r",
							"});\r",
							"\r",
							"jsonData.salary.forEach ((person) => {\r",
							"    console.log (person)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "vika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"let req = request.data\r",
							"let req_salary = req.salary\r",
							"let start_qa_salary = +req.salary\r",
							"let qa_salary_after_6_months = req.salary *2\r",
							"let qa_salary_after_12_months = req.salary *2.7\r",
							"let salary_after_half_a_year = req.salary *3.3\r",
							"let salary_after_three_a_half = req.salary * 3.8\r",
							"let u_salary_5_years = req.salary *4.2\r",
							"\r",
							"pm.test(\"start_qa_salary\",function(){\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"    });\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\",function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"    });\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\",function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"    });\r",
							"\r",
							"pm.test(\"qa_salary_after_1.5_year\",function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"    });\r",
							"\r",
							"pm.test(\"qa_salary_after_3.5_years\",function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"    });\r",
							"\r",
							"pm.test(\"person\",function(){\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"    });\r",
							"\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"pm.test(\"salary_after_half_a_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(salary_after_half_a_year);\r",
							"});\r",
							"\r",
							"pm.test(\"salary_after_three_a_half\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(salary_after_three_a_half);\r",
							"});\r",
							"\r",
							"pm.test(\"u_name=salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"pm.test(\"u_salary_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(u_salary_5_years);\r",
							"});\r",
							"\r",
							"for (key in jsonData ['person']) {\r",
							"    if (jsonData ['person'].hasOwnProperty(key)) {\r",
							"        console.log (key);\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = +req.salary\r",
							"let resp_salary_1_5 = req_salary * 4\r",
							"let dog_name = \"Luky\"\r",
							"let dog_age = 4\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"console.log (\r",
							"    jsonData.family\r",
							")\r",
							"\r",
							"pm.test(\"dog_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"dog_name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"dog_age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "name",
							"value": "vika",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=vika&age=27&salary=2500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "vika"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"let req =  pm.request.url.query.toObject()\r",
							"\r",
							"let req_name = req.name\r",
							"let req_age = +req.age\r",
							"let req_salary = +req.salary\r",
							"let req_salary_1 = String(req.salary *2)\r",
							"let req_salary_2 = String(req.salary *3)\r",
							"\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"pm.test(\"age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"console.log (\r",
							"jsonData.salary\r",
							")\r",
							"\r",
							"console.log (\r",
							"jsonData.salary [0]\r",
							")\r",
							"\r",
							"console.log (\r",
							"jsonData.salary [1]\r",
							")\r",
							"\r",
							"console.log (\r",
							"jsonData.salary [2]\r",
							")\r",
							"\r",
							"pm.test(\"salary_0\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"pm.test(\"req_salary_1 = +req.salary*2\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(req_salary_1);\r",
							"});\r",
							"\r",
							"pm.test(\"req_salary_1 = +req.salary*3\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(req_salary_2);\r",
							"});\r",
							"\r",
							"jsonData.salary.forEach ((sa1) => {\r",
							"    console.log (sa1)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "vikky",
							"type": "text"
						},
						{
							"key": "password",
							"value": "285474789",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "vikkky",
							"disabled": true
						},
						{
							"key": "password",
							"value": "326759875",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}